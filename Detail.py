#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    May 27, 2020 07:22:21 PM +07  platform: Windows NT

import sys
import pandas as pd
from datetime import datetime
import uuid

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Detail_support

client = None
t_id = None
def new_transaction(pelanggan):
    global client, t_id
    t_id = uuid.uuid4().int
    client = pelanggan
    vp_start_gui()

def add_product(tid, user):
    global client, t_id
    t_id = tid
    client = user
    vp_start_gui()
    
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Detail (root)
    Detail_support.init(root, top)
    root.mainloop()

w = None
def create_Detail(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Detail(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Detail (w)
    Detail_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Detail():
    global w
    w.destroy()
    w = None

class Detail:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+282+154")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.033, rely=0.044, height=21, width=64)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(cursor="fleur")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''TANGGAL''')

        self.tanggal = tk.Label(top)
        self.tanggal.place(relx=0.167, rely=0.044, height=21, width=120)
        self.tanggal.configure(background="#d9d9d9")
        self.tanggal.configure(disabledforeground="#a3a3a3")
        self.tanggal.configure(foreground="#000000")
        self.tanggal.configure(text=datetime.today().strftime('%Y-%m-%d %H:%M:%S'))

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.5, rely=0.044, height=21, width=104)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(cursor="fleur")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''PELANGGAN''')

        self.pelanggan = tk.Label(top)
        self.pelanggan.place(relx=0.7, rely=0.044, height=21, width=164)
        self.pelanggan.configure(background="#d9d9d9")
        self.pelanggan.configure(cursor="fleur")
        self.pelanggan.configure(disabledforeground="#a3a3a3")
        self.pelanggan.configure(foreground="#000000")
        self.pelanggan.configure(text=client)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.067, rely=0.178, relheight=0.5, relwidth=0.708)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        
        df = pd.read_csv('Detail.csv')
        df = df[df['t_id']==str(t_id)]
        cols = list(df.columns)
        
        self.tree = ttk.Treeview(self.Frame1)
        self.tree.pack()
        minwidth = self.tree.column('#0', option='minwidth')
        self.tree.column('#0', width=minwidth)
        self.tree["columns"] = cols
        for i in cols:
            self.tree.column(i, anchor="w", width=100)
            self.tree.heading(i, text=i.capitalize(), anchor='w')
        
        for index, row in df.iterrows():
            self.tree.insert("",0,text=index,values=list(row))
        total = 0
        for line in self.tree.get_children():
            total += self.tree.item(line)['values'][2]
        
        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.35, rely=0.711, height=21, width=83)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''TOTAL''')

        self.total = tk.Label(top)
        self.total.place(relx=0.517, rely=0.711, height=21, width=154)
        self.total.configure(background="#d9d9d9")
        self.total.configure(disabledforeground="#a3a3a3")
        self.total.configure(foreground="#000000")
        self.total.configure(text=total)
        
        self.add = tk.Button(top)
        self.add.place(relx=0.833, rely=0.2, height=24, width=55)
        self.add.configure(activebackground="#ececec")
        self.add.configure(activeforeground="#000000")
        self.add.configure(background="#d9d9d9")
        self.add.configure(disabledforeground="#a3a3a3")
        self.add.configure(foreground="#000000")
        self.add.configure(highlightbackground="#d9d9d9")
        self.add.configure(highlightcolor="black")
        self.add.configure(pady="0")
        self.add.configure(text='''Tambah''')
        self.add.configure(command=lambda :Detail_support.new(t_id, client))

        self.delete = tk.Button(top)
        self.delete.place(relx=0.833, rely=0.311, height=24, width=55)
        self.delete.configure(activebackground="#ececec")
        self.delete.configure(activeforeground="#000000")
        self.delete.configure(background="#d9d9d9")
        self.delete.configure(disabledforeground="#a3a3a3")
        self.delete.configure(foreground="#000000")
        self.delete.configure(highlightbackground="#d9d9d9")
        self.delete.configure(highlightcolor="black")
        self.delete.configure(pady="0")
        self.delete.configure(text='''Hapus''')

        self.confirm = tk.Button(top)
        self.confirm.place(relx=0.033, rely=0.844, height=24, width=557)
        self.confirm.configure(activebackground="#ececec")
        self.confirm.configure(activeforeground="#000000")
        self.confirm.configure(background="#d9d9d9")
        self.confirm.configure(disabledforeground="#a3a3a3")
        self.confirm.configure(foreground="#000000")
        self.confirm.configure(highlightbackground="#d9d9d9")
        self.confirm.configure(highlightcolor="black")
        self.confirm.configure(pady="0")
        self.confirm.configure(text='''Bayar''')
        self.confirm.configure(command=lambda : Detail_support.new_transaction(t_id,client,total))

        self.cancel = tk.Button(top)
        self.cancel.place(relx=0.033, rely=0.911, height=24, width=557)
        self.cancel.configure(activebackground="#ececec")
        self.cancel.configure(activeforeground="#000000")
        self.cancel.configure(background="#d9d9d9")
        self.cancel.configure(disabledforeground="#a3a3a3")
        self.cancel.configure(foreground="#000000")
        self.cancel.configure(highlightbackground="#d9d9d9")
        self.cancel.configure(highlightcolor="black")
        self.cancel.configure(pady="0")
        self.cancel.configure(text='''Batal''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

if __name__ == '__main__':
    vp_start_gui()





